#
# Copyright (C) 2023, Pelican Project, Morgridge Institute for Research
#
# Licensed under the Apache License, Version 2.0 (the "License"); you
# may not use this file except in compliance with the License.  You may
# obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# This file contains structured documentation about the Pelican parameters.
# While it is somewhat human-readable, it is meant to help with the documentation
# generation.
---
name: ConfigBase
description: >-
  The directory containing the Pelican configurations and data when the utility
  is run as non-root.  Automatically configured; cannot be overridden.
default: "~/.config/pelican"
components: ["*"]
type: filename
---
name: TLSCertificate
description: >-
  The name of a file containing an X.509 host certificate to use for TLS
  authentication when running server components of Pelican.
type: filename
root_default: /etc/pelican/certificates/tls.crt
default: "$ConfigBase/certificates/tls.crt"
components: ["origin", "nsregistry", "director"]
---
name: TLSKey
description: >-
  The name of a file containing a private key corresponding to the TLSCertificate.
  Used when running server components of Pelican.
type: filename
root_default: /etc/pelican/certificates/tls.key
default: "$ConfigBase/certificates/tls.key"
components: ["origin", "nsregistry", "director"]
---
name: TLSSkipVerify
description: >-
  When set to true, Pelican will skip TLS verification.  This allows a "man in the middle" attack on the connection but can simplify testing.  Intended for developers.
type: bool
default: false
components: ["origin", "nsregistry", "director"]
---
name: XrootdRun
description: >-
  A directory where temporary configurations will be stored for the xrootd daemon
  started by the origin.

  For non-root servers, if $XDG_RUNTIME_DIR is not set, a temporary directory will
  be created (and removed on shutdown)
type: filename
root_default: /run/pelican/xrootd
default: $XDG_RUNTIME_DIR/pelican
components: ["origin"]
---
name: RobotsTxtFile
description: >-
  Origins may be indexed by web search engines; to control the behavior of search
  engines, one may provide local policy via a [robots.txt file](https://en.wikipedia.org/wiki/Robots.txt).

  If this file is not present, it will be auto-created with a default policy of
  blocking all indexing.
type: filename
root_default: /etc/pelican/robots.txt
default: $ConfigBase/robots.txt
components: ["origin"]
---
name: ScitokensConfig
description: >-
  The location of a file configuring xrootd's
  [token-based authorization subsystem](https://github.com/xrootd/xrootd/blob/master/src/XrdSciTokens/README.md).
  This file allows arbitrary changes to the authorization configuration and will be merged with any
  auto-generated configuration; it's recommended for use by experts only.
type: filename
root_default: /etc/pelican/xrootd/scitokens.cfg
default: $ConfigBase/xrootd/scitokens.cfg
---
name: Director.DefaultResponse
description: >-
  The default response type of a redirect for a director instance. Can be either "cache" or "origin". If a director
  is hosted at https://director.com, then a GET request to https://director.com/foo/bar.txt will either redirect to
  the nearest cache for namespace /foo if Director.DefaultResponse is set to "cache" or to the origin for /foo if
  it is set to "origin".
type: string
default: cache
components: ["director"]
---
name: TopologyNamespaceURL
description: >-
  A URL containing namespace information for origins and caches configured via the OSG Topology application (a legacy integration). The URL
  should point to the hosted namespace.json.
type: url
osdf_default: https://topology.opensciencegrid.org/stashcache/namespaces.json
default: none
components: ["director"]
---
name: MaxMindKeyFile
description: >-
  A filepath to a MaxMind API key. The director service uses the MaxMind GeoLite City database (available [here](https://dev.maxmind.com/geoip/docs/databases/city-and-country))
  to determine which cache is nearest to a client's IP address. The database, if not already found, will be downloaded
  automatically when a director is served and a valid key is present.
type: url
default: none
components: ["director"]
---
name: GeoIPLocation
description: >-
  A filepath to the intended location of the MaxMind GeoLite City database. This option can be used either to load
  an existing database, or to configure the preferred download location if Pelican has a MaxMind API key.
type: filename
root_default: /var/cache/pelican/maxmind/GeoLite2-City.mmdb
default: $ConfigBase/maxmind/GeoLite2-city.mmdb
components: ["director"]
---
name: DirectorUrl
description: >-
  A URL indicating where a director service is hosted.
type: url
osdf_default: Default is determined dynamically through metadata at <federation URL>/.well-known/pelican-configuration
default: none
components: ["client", "origin"]
---
name: NamespaceUrl
description: >-
  A URL indicating where the namespace registry service is hosted.
type: url
osdf_default: Default is determined dynamically through metadata at <federation URL>/.well-known/pelican-configuration
default: none
components: ["client", "director", "origin"]
---
name: IssuerKey
description: >-
  The name of the file containing a service's private `issuer.jwk` key.
type: filename
root_default: /etc/pelican/issuer.jwk
default: $ConfigBase/issuer.jwk
components: ["client", "nsregistry", "director"]
---
name: NSRegistryLocation
description: >-
  A filepath to the intended location of the namespace registry's database.
type: filename
root_default: /var/lib/pelican/registry.sqlite
default: $ConfigBase/ns-registry.sqlite
components: ["nsregistry"]
---
name: OIDC.ClientIDFile
description: >-
  A filepath to a file containing an OIDC Client ID. This is used by the namespace registry to establish OIDC information
  for authenticated registration.
type: filename
root_default: /etc/pelican/oidc-client-id
default: $ConfigBase/oidc-client-id
components: ["nsregistry"]
---
name: OIDC.ClientSecretFile
description: >-
  A filepath to a file containing an OIDC Client Secret. This is used by the namespace registry to establish OIDC information
  for authenticated registration.
type: filename
root_default: /etc/pelican/oidc-client-secret
default: $ConfigBase/oidc-client-secret
components: ["nsregistry"]
---
name: OIDC.DeviceAuthEndpoint
description: >-
  A URL describing an OIDC Device Auth Endpoint. This is used by the namespace registry to establish OIDC information
  for authenticated registration.
type: url
default: none
components: ["nsregistry"]
---
name: OIDC.TokenEndpoint
description: >-
  A URL describing an OIDC Token Endpoint. This is used by the namespace registry to establish OIDC information
  for authenticated registration.
type: url
default: none
components: ["nsregistry"]
---
name: OIDC.UserInfoEndpoint
description: >-
  A URL describing an OIDC User Info Endpoint. This is used by the namespace registry to establish OIDC information
  for authenticated registration.
type: url
default: none
components: ["nsregistry"]
---
name: WebPort
description: >-
  The port number the Pelican web interface will be bound to.
type: int
default: 8444
components: ["nsregistry", "director", "origin"]
