swagger: "2.0"
info:
  title: Pelican Server APIs
  description:
    "[Pelican](https://pelicanplatform.org/) provides an open-source software platform for federating
    dataset repositories together and delivering the objects to computing capacity such as the [OSPool](https://osg-htc.org/services/open_science_pool.html)


    This is the API documentation for various APIs in Pelican servers (director, registry, origin, etc)
    to communicate with each other and in-between users accessing the servers.


    Note that we use cookie authentication and authorization. We check a cookie named `login` with value being a JWT.
    The cookie is issued after a successful call to `/api/v1.0/auth/login`. However, OpenAPI 2.0 does not support specifying cookie-based security check.
    Therefore, as an alternative, we will add `Authentication Required` to the API description where needed.

    For endpoint that is only accesible by users with admin privilege, we mark the endpoint as `Admin privilege Required`.


    For how to set up Pelican servers, please refer to the documentation at [docs.pelicanplatform.org](https://docs.pelicanplatform.org/)"
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
  contact:
    name: API Support via Pelican GitHub Issue
    url: https://github.com/PelicanPlatform/pelican/issues
  version: "1.0"
basePath: /api/v1.0/
consumes:
  - application/json
produces:
  - application/json
schemes:
  - https
securityDefinitions:
  # This is a hacky way to specify Bearer token auth here because it's not actually an "apikey"
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: >-
      Enter the JWT with the `Bearer` prefix, e.g. "Bearer abcde12345".
definitions:
  HealthStatus:
    type: object
    description: The health status of a server component
    properties:
      status:
        type: string
        description: The status of the component, can be one of "unknown", "warning", "ok", and "critical"
        example: warning
      message:
        type: string
        description: Optional message to describe the status
        example: ""
      last_update:
        type: integer
        description: Int64 unix time of the last status update
        example: 1700594867
    readOnly: true
  WhoAmI:
    type: object
    description: The return data of /auth/whoami endpoint
    properties:
      authenticated:
        type: boolean
        description: If the current user is authenticated
        example: true
        default: false
      role:
        type: string
        description: The user role. Will be either "admin" or "user"
        example: "user"
        default: ""
      user:
        type: string
        description: The user identifier. For root user, it will be "admin".
          For regular user from CILogon login, it will be the "sub" claim of their CILogon access token
        example: "http://cilogon.org/serverA/users/12345"
        default: ""
  ErrorModel:
    type: object
    description: The error reponse of a request
    properties:
      error:
        type: string
        description: The detail error message
        example: Bad request
  ErrorModelV2:
    type: object
    description: The error response of a request
    properties:
      status:
        type: string
        default: ""
        example: "error"
        description: The response status. It's one of success|error|timeout
      msg:
        type: string
        default: ""
        description: The response message
  SuccessModel:
    type: object
    description: The successful reponse of a request
    properties:
      msg:
        type: string
        description: The detail success message
        example: Success
  AdminMetadata:
    type: object
    properties:
      user_id:
        type: string
        description: '"sub" claim of user JWT who requested registration'
      description:
        type: string
      site_name:
        type: string
        description: "Name of the site"
      institution:
        type: string
        description: >
          "Unique identifier of the institution to register to.
          For Pelican running in OSDF mode, this will be the OSG ID of the institution"
        example: "https://osg-htc.org/iid/01y2jtd41"
      security_contact_user_id:
        type: string
        description: '"sub" claim of user responsible for the security of the service'
      status:
        $ref: "#/definitions/RegistrationStatus"
      approver_id:
        type: string
        description: '"sub" claim of user JWT who approved the service registration'
      approved_at:
        type: string
        format: date-time
        description: "Timestamp of when the registration was approved"
      created_at:
        type: string
        format: date-time
        description: "Timestamp of when the registration was created"
      updated_at:
        type: string
        format: date-time
        description: "Timestamp of the last update"
  AdminMetadataForRegistration:
    type: object
    required:
      - "institution"
    properties:
      description:
        type: string
      site_name:
        type: string
        description: "Name of the site"
      institution:
        type: string
        description: >
          "Unique identifier of the institution to register to.
          For Pelican running in OSDF mode, this will be the OSG ID of the institution"
        example: "https://osg-htc.org/iid/01y2jtd41"
      security_contact_user_id:
        type: string
        description: '"sub" claim of user responsible for the security of the service'
  RegistrationStatus:
    type: string
    enum:
      - Pending
      - Approved
      - Denied
      - Unknown
  NamespaceWOPubkey:
    type: object
    properties:
      id:
        type: integer
        description: The ID of the namespace entry
        example: 1
      prefix:
        type: string
        description: The namespace prefix to register. Should be an absolute path.
        example: "/test"
      identity:
        type: string
        description: The user identity we get from CILogon if the namespace is registered via CLI with `--with-identity` flag
      admin_metadata:
        $ref: "#/definitions/AdminMetadata"
      custom_fields:
        type: object
        description: The custom fields user registered, configurable by setting Registry.CustomRegistrationFields.
  Institution:
    type: object
    properties:
      id:
        type: string
        description: The unique ID of the institution. For Pelican running in OSDF alias, this will be OSG ID of the institution
        example: https://osg-htc.org/iid/01y2jtd41
      name:
        type: string
        description: The name of the institution
        example: University of Wisconsin - Madison
  Namespace:
    type: object
    properties:
      id:
        type: integer
        description: The ID of the namespace entry
        example: 1
      prefix:
        type: string
        description: The namespace prefix to register. Should be an absolute path.
        example: "/test"
      identity:
        type: string
        description: The user identity we get from CILogon if the namespace is registered via CLI with `--identity` flag
      pubkey:
        type: string
        description:
          The public JWK from the origin that wants to register the namespace.
          It should be a marshaled (stringfied) JSON that contains either one JWK or a JWKS
      admin_metadata:
        $ref: "#/definitions/AdminMetadata"
      custom_fields:
        type: object
        description: The custom fields user registered, configurable by setting Registry.CustomRegistrationFields.
  NamespaceForRegistration:
    type: object
    required:
      - "prefix"
      - "pubkey"
    properties:
      prefix:
        type: string
        description: The namespace prefix to register. Should be an obsolute paths
        example: "/test"
      pubkey:
        type: string
        description:
          The public JWK from the origin that wants to register the namespace.
          It should be a marshaled (stringfied) JSON that contains either one JWK or a JWKS
      admin_metadata:
        $ref: "#/definitions/AdminMetadataForRegistration"
      custom_fields:
        type: object
        description: The custom fields to register, configurable by setting Registry.CustomRegistrationFields.
  TopologyNamespace:
    type: object
    properties:
      id:
        type: integer
      prefix:
        type: string
        default: ""
  RegistrationFieldType:
    type: string
    enum:
      - string
      - int
      - enum
      - datetime
    example: enum
  RegistrationField:
    type: object
    required:
      - "name"
      - "displayed_name"
      - "type"
      - "required"
    properties:
      name:
        type: string
        description: |
          The name of the field as the key of the object to submit the request. Note that if the
          name is dot '.' separated, it means the hierarchy of the object.

          For example, `custom_fields.department` means that your request needs to be

          ```json
            {
              "custom_fields": {
                "department": "value"
              }
            }
          ```
        example: "custom_fields.department"
      displayed_name:
        type: string
        description: The human-readable name of the field
        example: "Department"
      type:
        description: The data type of the field
        $ref: "#/definitions/RegistrationFieldType"
      required:
        description: If this field is required for registration
        type: boolean
      options:
        description: The available options if the field is "enum" type
        type: array
        items:
          type: object
          properties:
            name:
              type: string
              description: The name of the option that will appear in UI
              example: "Option A"
            id:
              type: string
              description: The unique identifier of the option that will be stored in db
              example: "option1"
          minItems: 0
  ObjectStatMetadata:
    type: object
    properties:
      checksum:
        type: string
        default: ""
      content_length:
        type: integer
        example: 10
      url:
        type: string
        description: The URL to get the object
        example: "https://example-origin.com:8443/foo/bar/test.txt"
  DirectorServerResponse:
    type: object
    properties:
      name:
        type: string
        example: "Test Origin"
      auth_url:
        type: string
        description: The URL of the issuer on the server to check token validity
        example: "https://example-origin.com:8443"
      broker_url:
        type: string
        description: The URL to the connection broker
        example: "https://example-origin.com:8447"
      url:
        type: string
        description: The URL of XrootD service on the server to access objects
        example: "https://example-origin.com:8443"
      web_url:
        type: string
        description: The URL of the web engine running on the server to visit the web interface and send API requests
        example: "https://example-origin.com:8444"
      type:
        type: string
        description: Type of the server. Origin|Cache
        example: Origin
      latitute:
        type: number
        description: The latitute of the server based on its IP address
        default: 0
      longitude:
        type: number
        description: The longitude of the server based on its IP address
        default: 0
      enableWrite:
        type: boolean
        description: If the origin server enables write access. Only valid for type=Origin
        default: false
      enableFallbackRead:
        type: boolean
        description: If fall back to read from the origin when there's no cache to serve the file
        default: false
      filtered:
        type: boolean
        description: |
          If the server is excluded from serving client object requests.
          No traffic will be redirect to the server if the value is true
        default: false
      filteredType:
        type: string
        description: |
          The type of filtering/allowance of the server. Can be permFilter|tempFilter|tempAllow

          * **permFilter** when the server is filtered by configuration parameter `Director.FilteredServers`
          * **tempFilter** when the server is filtered by web API request at `/servers/filter/*name`. The filter
            rule lives in-memory and will be reset at the server restart
          * **tempAllow** when the  server is filtered by configuration parameter but _allowed_ by the web API at `/servers/allow/*name`,
            the change lives in-memory and will be overwritten by config parameter at the server restart
        default: ""
      status:
        type: string
        description: The status of director file transfer test against the server. Can be Initializing|Unknown|OK|Error
        default: Unknown
  OriginExportCapabilities:
    type: object
    description: The access control of an origin exported namespace
    properties:
      PublicReads:
        type: boolean
        default: false
      Reads:
        type: boolean
        default: false
      Writes:
        type: boolean
        default: false
      Listings:
        type: boolean
        default: false
      DirectReads:
        type: boolean
        default: false
  OriginExport:
    type: object
    properties:
      storage_prefix:
        type: string
        example: "/tmp/pelican"
        description: The path to the directory to be exported on the host server
      federation_prefix:
        type: string
        example: "/demo"
        description: The prefix to access the file through the Pelican federation
      s3_bucket:
        type: string
        example: "demo-bucket"
        description: "The bucket name of the origin if it's using the S3 storage backend"
      s3_access_keyfile:
        type: string
        example: "/path/to/key"
        description: "The path to the file that contains the access key or API key for S3 storage backend"
      s3_secret_keyfile:
        type: string
        example: "/path/to/secret"
        description: "The path to the file that contains the secret for S3 storage backend"
      capabilities:
        type: object
        $ref: "#/definitions/OriginExportCapabilities"
  OriginExportRes:
    type: object
    properties:
      type:
        type: string
        example: "posix"
        description: "The storage type of the origin server. Is either \"posix\" or \"s3\""
      exports:
        type: array
        items:
           $ref: "#/definitions/OriginExport"
        minItems: 0
  DirectorContact:
    type: object
    properties:
      email:
        type: string
        default: ""
      url:
        type: string
        default: ""

tags:
  - name: auth
    description: Authentication APIs for all servers
  - name: common
    description: Common APIs for all servers
  - name: metrics
    description: APIs for server metrics
  - name: registry_ui
    description: APIs for the Registry server Web UI
  - name: director_ui
    description: APIs for the Director server Web UI
  - name: director
    description: Non-UI facing APIs for the Director server
  - name: origin_ui
    description: APIs for the Origin server Web UI
paths:
  /health:
    get:
      tags:
        - "common"
      summary: Health check endpoint for server Web engine
      produces:
        - application/json
      responses:
        "200":
          description: "Server Web engine is running and taking requests"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Web Engine Running. Time: 2024-01-10 22:32:59.637471175 +0000 UTC m=+35.515010725"
  /config:
    get:
      tags:
        - common
      summary: Return the configuration values of the server and their type
      description: >-
        `Authentication Required` `Admin privilege Required`
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
            description: The JSON object output from viper with all config values and their type in the current server
            example:
              ConfigDir:
                Type: "string"
                Value: "/etc/pelican"
              Debug:
                Type: "bool"
                Value: true
              DisableHttpProxy:
                Type: "bool"
                Value: false
              DisableProxyFallback:
                Type: "bool"
                Value: false
              MinimumDownloadSpeed:
                Type: "int"
                Value: 0
              Cache:
                DataLocation:
                  Type: "string"
                  Value: "/run/pelican/xcache"
                EnableVoms:
                  Type: "bool"
                  Value: false
                ExportLocation:
                  Type: "string"
                  Value: "/"
                Port:
                  Type: "int"
                  Value: 8447
                XRootDPrefix:
                  Type: "string"
                  Value: ""
        "401":
          description: Unauthorized
    patch:
      tags:
        - "common"
      summary: Update the server configuration with user-provided changes
      description:
        "`Authentication Required` `Admin privilege Required`


        The server will restart promptly after a  successful request. You may query against
        `/health` endpoint to check if the server is back online.


        Note that the endpoint will update the value of **all parameters provided**, no matter the value is in default or not (`0`, `null`,`undefined`, etc).


        This means you want to eliminate parameters from the request body that are untouched."
      parameters:
        - in: body
          name: config
          required: true
          description:
            The config value to update.
            It must be a JSON object with keys/values that match config parameters' name and data type.
            Parameter names are case-insensitive.
          schema:
            type: object
            example:
              Logging:
                Cache:
                  Scitokens: "info"
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        "200":
          description: Successfully updated the config. Server is restarting.
          schema:
            type: object
            $ref: "#/definitions/SuccessModel"
        "400":
          description: Bad request. The requested changes of config values are invalid.
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "401":
          description: Unauthorized. You need to login to take this action.
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "403":
          description: Forbidden. You need admin privileges to take this action.
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "500":
          description: Server error. Can't update the config due to internal server error.
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
  /servers:
    get:
      tags:
        - common
      summary: Returns a list of enabled servers
      description: Server names are in lower-case, sorted in alphabetical order.
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
            properties:
              servers:
                type: array
                items:
                  type: string
                  minItems: 1
                example: ["director", "origin", "registry"]
        "500":
          description: Server encountered error in reading institution configuration
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
  /metrics/health:
    get:
      tags:
        - metrics
      summary: Returns the health status of server components
      description: "`Authentication Required` `Admin Privilege Required"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
            properties:
              status:
                type: string
                description: The overall health status of the server
              components:
                type: object
                description: The health status of each server components
                properties:
                  cmsd:
                    $ref: "#/definitions/HealthStatus"
                  federation:
                    $ref: "#/definitions/HealthStatus"
                  web-ui:
                    $ref: "#/definitions/HealthStatus"
                  xrootd:
                    $ref: "#/definitions/HealthStatus"
  /auth/login:
    post:
      tags:
        - auth
      summary: Login with username and password to Pelican web UI
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: userCredential
          description: The username and password to authenticate
          schema:
            type: object
            required:
              - user
              - password
            properties:
              user:
                type: string
              password:
                type: string
      responses:
        "200":
          description: Login succeed
          schema:
            type: object
            $ref: "#/definitions/SuccessModel"
        "400":
          description: Invalid request, when username or password is missing
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "401":
          description: Login failed, when username or password doesn't match the record
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
  /auth/initLogin:
    post:
      tags:
        - auth
      summary: Login with one-time activation code to initialize web UI
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: activationCode
          description: The 6-digit code used to initialize web UI
          schema:
            type: object
            required:
              - code
            properties:
              code:
                type: string
                example: "123456"
      responses:
        "200":
          description: Login succeed
          schema:
            type: object
            $ref: "#/definitions/SuccessModel"
        "400":
          description:
            Invalid request, when authentication is already initialized,
            code-based login is not available, or login code is not provided
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "401":
          description: Login failed, when code is not valid
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
  /auth/resetLogin:
    post:
      tags:
        - auth
      summary: Reset the password for the user
      description: "`Authentication Required` `Admin Privilege Required`"
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: newPassword
          description: The new password to reset to
          schema:
            type: object
            required:
              - password
            properties:
              password:
                type: string
                description: The new password to reset to
                example: ""
      responses:
        "200":
          description: Reset succeed
          schema:
            type: object
            $ref: "#/definitions/SuccessModel"
        "400":
          description: Invalid request request, when password is missing
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "500":
          description: Server-side error, when failed to write the new password to auth file
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "403":
          description: Unauthorized request, when users are not logged in
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
  /auth/whoami:
    get:
      tags:
        - auth
      summary: Return the authentication status of the web ui
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
            $ref: "#/definitions/WhoAmI"
          headers:
            X-CSRF-Token:
              description: The CSRF token that users are expected to attach as the request header for any modification requests for registry APIs (PUT/PATCH/DELETE).
              type: string
  /auth/loginInitialized:
    get:
      tags:
        - auth
      summary: Return the status of web UI initialization
      description:
        The initialization depends on if the user has used the one-time activation
        code to set up the password for the admin user
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
            description: The initialization status
            properties:
              initialized:
                type: boolean
                example: true
  /auth/cilogon/login:
    get:
      tags:
        - auth
      summary: Redirect user to CILogon authentication page for OAuth2 third-party login
      parameters:
        - in: query
          name: next_url
          type: string
          description: The path to redirect users to once they successfully authenticated against CILogon
      responses:
        "307":
          description: Redirect user to CILogon authentication page
        "500":
          description: Internal server error when generating CSRF cookie for OAuth flow
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
  /auth/cilogon/callback:
    get:
      tags:
        - "auth"
      summary: The callback endpoint CILogon will call once the user has been successfully authenticated
      description: Calling this URL with valid parameters will login the user to Pelican website
      parameters:
        - in: query
          name: state
          type: string
          description: The CSRF token for validation and the next_url for redirect, in the form of `"<[16]byte>:<nextURL>"`
        - in: query
          name: code
          type: string
          description: The access token and refresh token returned from CILogon
      responses:
        "307":
          description: Successfully log the user in, add login cookie, and direct user to `/` if `next_url` is empty; otherwise to `next_url`
        "400":
          description: Invalid request, when `state` or `token` query is invalid
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "500":
          description: Internal server error when processing the token and handshake with CILogon
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
  /registry_ui/namespaces:
    get:
      tags:
        - "registry_ui"
      summary: Return a list of all namespaces in the registry
      description:
        A public API to get all namespaces in the registry. Note that `pubkey` is not included in the return data.


        For unauthenticated users, it only returns a list of approved namespaces.

        For authenticated users, it returns namespaces with any approval status.
      parameters:
        - name: server_type
          in: query
          required: false
          description: The type of server to filter the results. The value can be either `origin` or `cache`
          type: string
        - name: status
          in: query
          required: false
          description:
            The approval status of the namespaces, can be `pending`, `approved`, `denied`, or `unknown`.

            If `status == unknown`, internally it will match any registration with `status == ""` or `stauts == "unknown"`

            For unauthenticated users, filter with `status != approved` will result in a 403 error.
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/NamespaceWOPubkey"
            description: An array of namespaces
        "400":
          description: Invalid request parameters
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "403":
          description: Operation forbidden, when an unauthenticated user trying to filter against `status != approval`
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "500":
          description: Internal server error
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
    options:
      tags:
        - "registry_ui"
      summary: Return a list of field available to register
      description: "`Authentication Required`"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/RegistrationField"
    post:
      tags:
        - "registry_ui"
      summary: Create a new namespace registration
      description: "`Authentication Required`"
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: namespace
          description: The namespace data to register
          required: true
          schema:
            $ref: "#/definitions/NamespaceForRegistration"
        - in: header
          name: X-CSRF-Token
          description: The CSRF token for protecting against Cross-Site Request Forgery (CSRF) attacks. Obtained by requesting `/api/v1.0/auth/whoami` and reading response header `X-CSRF-Token`
          type: string
          required: true
      responses:
        "200":
          description: >
            OK.
            Note that if the registry runs in the OSDF mode,
            the `"message"` will reflect if there's an existing namespace in the OSDF topology.
          schema:
            type: object
            $ref: "#/definitions/SuccessModel"
        "400":
          description: The request data has invalid or missing field value
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "401":
          description: Unauthorized
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "500":
          description: Internal server error
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
  /registry_ui/namespaces/user:
    get:
      tags:
        - "registry_ui"
      summary: Return a list of namespaces for the currently authenticated user
      description: "`Authentication Required`"
      parameters:
        - name: status
          in: query
          required: false
          description:
            The approval status of the namespaces, can be `pending`, `approved`, `denied`, or `unknown`.

            If `status == unknown`, internally it will match any registration with `status == ""` or `stauts == "unknown"`
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/NamespaceWOPubkey"
            description: An array of namespaces
        "400":
          description: Invalid request parameters
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "500":
          description: Internal server error
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
  /registry_ui/namespaces/{id}:
    get:
      tags:
        - "registry_ui"
      summary: Return the namespace by `id`
      description: "`Authentication Required`


        For user with admin privilege, it returns for all valid namespace request.


        For general users, it only returns namespace belonging to the user, or it returns 404
        "
      operationId: getNamespaceById
      parameters:
        - name: id
          in: path
          description: ID of the namespace to fetch
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
            $ref: "#/definitions/Namespace"
        "400":
          description: Invalid namespace ID
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "401":
          description: Authentication required to perform this action
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "404":
          description: Namespace not found, either does not exists or the user doesn't have privilege to get it
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "500":
          description: Internal server error
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
    put:
      tags:
        - "registry_ui"
      summary: Update the namespace by `id`
      description: "`Authentication Required`


        For user with admin privilege, they can update any valid namespace.


        Non-admin users can update only namespaces they own and only if the approval status is `admin_metadata.status == approved`, otherwise the endpoint returns 404.
        "
      operationId: updateNamespaceById
      parameters:
        - name: id
          in: path
          description: ID of the namespace to update
          required: true
          type: integer
        - in: body
          name: namespace
          description: The namespace data to update
          required: true
          schema:
            $ref: "#/definitions/NamespaceForRegistration"
        - in: header
          name: X-CSRF-Token
          description: The CSRF token for protecting against Cross-Site Request Forgery (CSRF) attacks. Obtained by requesting `/api/v1.0/auth/whoami` and reading response header `X-CSRF-Token`
          type: string
          required: true
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
            $ref: "#/definitions/SuccessModel"
        "400":
          description: Invalid namespace ID
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "401":
          description: Authentication required to perform this action
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "403":
          description: The user does not have privilege to update the namespace
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "404":
          description: Namespace not found because it does not exist
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "500":
          description: Internal server error
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
    delete:
      summary: Delete a namespace registration by ID
      description: "`Authentication Required` `Admin privilege Required`

        Only admin users have privilege to this action.
        "
      tags:
        - "registry_ui"
      produces:
        - "application/json"
      parameters:
        - name: id
          in: path
          description: ID of the namespace to update
          required: true
          type: integer
      responses:
        "200":
          description: OK
          schema:
            type: object
            $ref: "#/definitions/SuccessModel"
        "400":
          description: Invalid namespace ID
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "403":
          description: The user does not have privilege to update the namespace
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "500":
          description: Internal server error
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"

  /registry_ui/namespaces/{id}/pubkey:
    get:
      tags:
        - "registry_ui"
      summary: Returns the public key of the namespace by id, in JWK Set format
      description: It returns the JWK set as a downloadable attachement. Refer to https://datatracker.ietf.org/doc/html/rfc7517#section-5 for the format of JWK set
      operationId: getNamespacePubkeyById
      parameters:
        - name: id
          in: path
          description: ID of the namespace to get public key
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: OK, an attachement is returned to download
          schema:
            type: object
        "400":
          description: Invalid namespace ID
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "404":
          description: Namespace not found, either does not exist or the user doesn't have privilege to get it
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "500":
          description: Internal server error
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
  /registry_ui/namespaces/{id}/approve:
    patch:
      tags:
        - "registry_ui"
      summary: Update namespace status to "approved"
      description: "`Authentication Required`


        Update namespace status to `approved` by namespace `id`.


        This action requires admin privilege to perform.
        "
      parameters:
        - name: id
          in: path
          description: ID of the namespace to update status
          required: true
          type: integer
        - in: header
          name: X-CSRF-Token
          description: The CSRF token for protecting against Cross-Site Request Forgery (CSRF) attacks. Obtained by requesting `/api/v1.0/auth/whoami` and reading response header `X-CSRF-Token`
          type: string
          required: true
      produces:
        - application/json
      responses:
        "200":
          description: Success
          schema:
            type: object
            $ref: "#/definitions/SuccessModel"
        "400":
          description: Invalid namespace ID
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "401":
          description: Authentication required to perform this action
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "403":
          description: The user does not have privilege to update the namespace status
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "404":
          description: Namespace not found because it does not exist
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "500":
          description: Internal server error
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
  /registry_ui/namespaces/{id}/deny:
    patch:
      tags:
        - "registry_ui"
      summary: Update namespace status to "denied"
      description: "`Authentication Required`


        Update namespace status to `denied` by namespace `id`.


        This action requires admin privilege to perform.
        "
      parameters:
        - name: id
          in: path
          description: ID of the namespace to update status
          required: true
          type: integer
        - in: header
          name: X-CSRF-Token
          description: The CSRF token for protecting against Cross-Site Request Forgery (CSRF) attacks. Obtained by requesting `/api/v1.0/auth/whoami` and reading response header `X-CSRF-Token`
          type: string
          required: true
      produces:
        - application/json
      responses:
        "200":
          description: Success
          schema:
            type: object
            $ref: "#/definitions/SuccessModel"
        "400":
          description: Invalid namespace ID
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "401":
          description: Authentication required to perform this action
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "403":
          description: The user does not have privilege to update the namespace status
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "404":
          description: Namespace not found because it does not exist
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "500":
          description: Internal server error
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
  /registry_ui/institutions:
    get:
      tags:
        - "registry_ui"
      summary: Returns a list of institution names available for user to select for namespace registration
      description: "`Authentication Required`"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              type: object
              $ref: "#/definitions/Institution"
              minItems: 0
        "401":
          description: Authentication required to perform this action
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "500":
          description: Server didn't configure `Registry.Institutions` or server encountered error in reading institution configuration
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
  /registry_ui/topology:
    get:
      tags:
        - "registry_ui"
      summary: Returns a list of namespaces from the OSDF namespace topology
      description: "The endpoint is only available when Pelican binary is running in OSDF mode. Otherwise, the endpoint returns an empty list."
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              type: object
              $ref: "#/definitions/TopologyNamespace"
              minItems: 0
        "500":
          description: Error retrieving namespaces from the topology
          schema:
            type: object
            $ref: "#/definitions/ErrorModelV2"
  /director_ui/servers:
    get:
      tags:
        - "director_ui"
      summary: Get a list of storage servers advertised to the director
      produces:
        - application/json
      parameters:
        - in: query
          name: server_type
          type: string
          description: The server type to filter the list. Can be origin|cache
      responses:
        "200":
          description: "OK"
          schema:
            type: array
            items:
              type: object
              $ref: "#/definitions/DirectorServerResponse"
              minimum: 0
        "400":
          description: "Bad request, query parameter is invalid"
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
  /director_ui/servers/filter/{name}:
    patch:
      summary: Filter a server from director redirecting
      description: |
        `Authentication Required` `Admin privilege Required`


        **The filter rules registered by this endpoint are in-memory and will be reset at the server restart.**

        If `Director.FilteredServers` is set, you may add additional, in-memory filter rules.

        If you want to persist the filtering rules, set `Director.FilteredServers` in your server config instead.
      tags:
        - "director_ui"
      parameters:
        - in: path
          name: name
          type: string
          required: true
          description: The server name to filter
      produces:
        - application/json
      responses:
        "200":
          description: "OK"
          schema:
            type: object
            $ref: "#/definitions/SuccessModel"
        "400":
          description: "Bad request. Either `name` is invalid or the server has been filtered"
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "403":
          description: "Forbidden. Admin privilege required"
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
  /director_ui/servers/allow/{name}:
    patch:
      summary: Reset filtering rule for a server from director redirecting
      description: |
        `Authentication Required` `Admin`


        **The reset of filter rules registered by this endpoint are in-memory and will be removed at the server restart.**

        You may reset the rules defined in `Director.FilteredServers` in-memory but they will be overwritten at the server restart
      tags:
        - "director_ui"
      parameters:
        - in: path
          name: name
          type: string
          required: true
          description: The server name to reset filtering
      produces:
        - application/json
      responses:
        "200":
          description: "OK"
          schema:
            type: object
            $ref: "#/definitions/SuccessModel"
        "400":
          description: "Bad request. Either `name` is invalid or the server is not being filtered"
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "403":
          description: "Forbidden. Admin privilege required"
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
  /director_ui/servers/origins/stat:
    get:
      tags:
        - "director_ui"
      summary: Get a list of origins willing to serve an object
      description: "`Authentication Required`"
      produces:
        - application/json
      parameters:
        - in: path
          name: object_name
          type: string
          required: true
          description: >
            The path to the name to query for. Example: `/foo/bar/barz.txt`
        - in: query
          name: min_responses
          type: integer
          description: Minimum number of success responses required
          default: 1
        - in: query
          name: max_responses
          type: integer
          description: Maximum number of success responses required
          default: 1
      responses:
        "200":
          description: Object is found in active origins and at least one origin responses successfully.
            It returns 200 even if min_responses wasn't reached but it will mark `ok` field to `false`.
          schema:
            type: object
            properties:
              ok:
                type: boolean
                description: If the min_responses is satistifed.
                example: true
              message:
                type: string
                description: Additional message when a query returns
                example: "Maximum responses reached for stat. Return result and cancel ongoing requests."
              metadata:
                type: array
                items:
                  $ref: "#/definitions/ObjectStatMetadata"
                  minItems: 1
        "400":
          description: Bad request. Either min_responses > max_responses, or invalid path to the object.
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "401":
          description: Authentication required to perform this action
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "404":
          description: Object namespace not found in active origins, or no origin responses successfully.
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "500":
          description: Server error when performing the query
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
    head:
      tags:
        - "director_ui"
      summary: Get a list of origins willing to serve an object
      description: "`Authentication Required`"
      produces:
        - application/json
      parameters:
        - in: path
          name: object_name
          type: string
          required: true
          description: >
            The path to the name to query for. Example: `/foo/bar/barz.txt`
        - in: query
          name: min_responses
          type: integer
          description: Minimum number of success responses required
          default: 1
        - in: query
          name: max_responses
          type: integer
          description: Maximum number of success responses required
          default: 1
      responses:
        "200":
          description: Object is found in active origins and at least one origin responses successfully.
            It returns 200 even if min_responses wasn't reached but it will mark `ok` field to `false`.
          schema:
            type: object
            properties:
              ok:
                type: boolean
                description: If the min_responses is satistifed.
                example: true
              message:
                type: string
                description: Additional message when a query returns
                example: "Maximum responses reached for stat. Return result and cancel ongoing requests."
              metadata:
                type: array
                items:
                  $ref: "#/definitions/ObjectStatMetadata"
                  minItems: 1
        "400":
          description: Bad request. Either min_responses > max_responses, or invalid path to the object.
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "404":
          description: Object namespace not found in active origins, or no origin responses successfully.
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "401":
          description: Authentication required to perform this action
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "500":
          description: Server error when performing the query
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
  /director_ui/contact:
    get:
      summary: Get the support contact information of the federation the director hostnames
      description: "Note that the response value (if successful) `email` and `url` can be either or both empty strings"
      tags:
        - "director_ui"
      responses:
        "200":
          description: "OK"
          schema:
            type: object
            $ref: "#/definitions/DirectorContact"
        "500":
          description: "Bad server configuration. Failed to get the director contact information from the server configuration"
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"

  /director/namespaces/prefix/{path}:
    get:
      summary: "Get the longest matched namespace prefix of a path"
      description: ""
      parameters:
        - name: path
          in: path
          description: "The path to an object or directory to get the namespace prefix for"
          required: true
          type: string
      tags:
        - "director"
      responses:
        "200":
          description: "OK"
          schema:
            type: object
            properties:
              prefix:
                type: string
                example: "/test/namespace"
                description: The longest matched namespace prefix
        "400":
          description: "Bad request. Path parameter is missing"
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "404":
          description: "Namespace prefix not found for the path"
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
  /origin_ui/exports:
    get:
      summary: Returns the data exports of the origin server
      description: >-
        `Authentication Required` `Admin Previlege Required`
      tags:
        - "origin_ui"
      produces:
        - "application/json"
      responses:
        "200":
          description: OK
          schema:
            type: object
            $ref: "#/definitions/OriginExportRes"
        "401":
          description: Authentication required to perform this action
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "403":
          description: You need to have admin privilege to access this endpoint
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "500":
          description: Error when fetching the origin exports
          schema:
            type: object
            $ref: "#/definitions/ErrorModelV2"
