/***************************************************************
 *
 * Copyright (C) 2025, Pelican Project, Morgridge Institute for Research
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you
 * may not use this file except in compliance with the License.  You may
 * obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ***************************************************************/

say('Scopes in the initial request: ' + to_string(scopes.));

access_token.sub := claims.sub;
access_token.iss := '{{- .OIDCIssuerURL -}}';

group_list. := claims.groups;

{{ if .GroupRequirements -}}
if [0 == size(|^group_list. /\ { {{- range $idx, $grp := .GroupRequirements -}}{{- if eq $idx 0 -}}'{{- $grp -}}'{{else}}, '{{- $grp -}}'{{- end -}}{{- end -}} })] then
[
    sys_err.ok := false;
    sys_err.message := 'Authenticated user is not in any of the following groups: {{ range $idx, $grp := .GroupRequirements -}}{{- if eq $idx 0 -}}"{{- $grp -}}"{{else}}, "{{- $grp -}}"{{- end -}}{{- end -}}';
    return();
];
{{- end }}

/*
 * Start with the scopes that Pelican provided to us, which are assumed
 * to be the scopes that the final token must be compatible with.
 */
default_scopes := |^claims.scopes;

/*
 * If a requested scope is a tighter requirement than what is permitted,
 * then grant the tighter requirement.
 */
user_scopes. := mask(scopes., -1 < starts_with(scopes., ~default_scopes));

/*
 * If a requested scope is a looser requirement than what is permitted,
 * then grant based on the default scopes.
 */
user_scopes_loose. := mask(~default_scopes, -1 < starts_with(~default_scopes, scopes.));

/*
 * Configure the access token.
 *
 * Pelican generates WLCG-style token scopes, so modify the token accordingly.
 */
access_token.'scope' := detokenize(unique(sort(user_scopes. ~ user_scopes_loose.)), ' ', 2);
access_token.'wlcg.ver' := '1.0';
access_token.'aud' := 'https://wlcg.cern.ch/jwt/v1/any';
access_token.'wlcg.groups' := group_list.;
remove(access_token.ver);
