#
# Copyright (C) 2024, Pelican Project, Morgridge Institute for Research
#
# Licensed under the Apache License, Version 2.0 (the "License"); you
# may not use this file except in compliance with the License.  You may
# obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

{{if .Origin.EnableCmsd}}
all.manager {{.Xrootd.ManagerHost}}+ {{.Xrootd.ManagerPort}}
{{end}}
all.role server
if exec xrootd
  xrd.port {{.Origin.CalculatedPort}}
  xrd.protocol http:{{.Origin.CalculatedPort}} libXrdHttp.so
fi
xrd.tls {{.Origin.RunLocation}}/copied-tls-creds.crt {{.Origin.RunLocation}}/copied-tls-creds.crt
{{if .Server.TLSCACertificateDirectory}}
xrd.tlsca certdir {{.Server.TLSCACertificateDirectory}}
{{else}}
xrd.tlsca certfile {{.Server.TLSCACertificateFile}}
{{end}}
{{if eq .Origin.EnableListings false}}
http.listingdeny true
{{end}}
{{if eq .Origin.EnablePublicReads true}}
sec.protbind * none
{{end}}
{{if .Origin.EnableMacaroons}}
http.exthandler xrdmacaroons libXrdMacaroons.so
macaroons.secretkey {{.Xrootd.MacaroonsKeyFile}}
ofs.authlib ++ libXrdMacaroons.so
{{end}}
http.header2cgi Authorization authz
{{if .Origin.EnableVoms}}
http.secxtractor /usr/lib64/libXrdVoms.so
{{end}}
http.staticpreload http://static/robots.txt {{.Xrootd.RobotsTxtFile}}
{{if .Xrootd.Sitename}}
all.sitename {{.Xrootd.Sitename}}
{{end}}
xrd.report {{if .Xrootd.SummaryMonitoringHost -}}{{.Xrootd.SummaryMonitoringHost}}:{{.Xrootd.SummaryMonitoringPort}},{{- end}}127.0.0.1:{{.Xrootd.LocalMonitoringPort}} every 30s
xrootd.monitor all auth flush 30s window 5s fstat 60 lfn ops xfr 5 {{if .Xrootd.DetailedMonitoringHost -}} dest redir fstat info files user pfc tcpmon ccm {{.Xrootd.DetailedMonitoringHost}}:{{.Xrootd.DetailedMonitoringPort}} {{- end}} dest redir fstat info files user pfc tcpmon ccm 127.0.0.1:{{.Xrootd.LocalMonitoringPort}}
all.adminpath {{.Origin.RunLocation}}
all.pidpath {{.Origin.RunLocation}}
{{if eq .Origin.StorageType "posix"}}
oss.localroot {{.Xrootd.Mount}}
{{else if eq .Origin.StorageType "s3"}}
ofs.osslib libXrdS3.so
# The S3 plugin doesn't currently support async mode
xrootd.async off
s3.url_style {{.Origin.S3UrlStyle}}
{{range .Origin.Exports}}
s3.begin
s3.path_name {{.FederationPrefix}}
{{- if .S3Bucket}}
# Buckets may be optional for some origins
s3.bucket_name {{.S3Bucket}}
{{end}}
s3.service_name s3
s3.region {{$.Origin.S3Region}}
s3.service_url {{$.Origin.S3ServiceUrl}}
{{- if .S3AccessKeyfile}}
s3.access_key_file {{.S3AccessKeyfile}}
{{- end -}}
{{if .S3SecretKeyfile}}
s3.secret_key_file {{.S3SecretKeyfile}}
{{- end}}
s3.end
{{end}}
{{end}}
xrootd.seclib libXrdSec.so
sec.protocol ztn
ofs.authorize 1
acc.audit deny grant
acc.authdb {{.Origin.RunLocation}}/authfile-origin-generated
ofs.authlib ++ libXrdAccSciTokens.so config={{.Origin.RunLocation}}/scitokens-origin-generated.cfg
# Tell xrootd to make each namespace we export available as a path at the server
{{range .Origin.Exports}}
all.export {{.FederationPrefix}}
{{end}}
{{if .Origin.SelfTest}}
# Note we don't want to export this via cmsd; only for self-test
xrootd.export /pelican/monitoring
xrootd.export /.well-known
{{end}}
{{if .Origin.Multiuser}}
ofs.osslib libXrdMultiuser.so default
ofs.ckslib * libXrdMultiuser.so
{{end}}
xrootd.chksum max 2 md5 adler32 crc32
xrootd.trace {{.Logging.OriginXrootd}}
xrd.trace {{.Logging.OriginXrd}}
cms.trace {{.Logging.OriginCms}}
xrootd.tls all
scitokens.trace {{.Logging.OriginScitokens}}
{{if .Xrootd.ConfigFile}}
continue {{.Xrootd.ConfigFile}}
{{end}}
