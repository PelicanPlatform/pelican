name: Run Tests (Linux)

# This workflow is intended to be called from other workflows, such as
# build-and-test.yaml and test-linux-pr.yaml.

on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string

jobs:
  test:
    runs-on: ubuntu-latest
    container:
      image: ${{ inputs.image }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - binary_name: pelican
            coverprofile: coverage.out
            tags: ""
          - binary_name: pelican-server
            coverprofile: coverage-server.out
            tags: lotman
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Do fetch depth 0 here because otherwise GoReleaser might not work properly:
        # https://goreleaser.com/ci/actions/?h=tag#workflow
        fetch-depth: 0
    - name: Mark the checkout as safe
      # NOTE (brianaydemir): This appears to be required for TestHandleCLIExecutableAlias.
      run: |
        git config --global --add safe.directory /__w/pelican/pelican
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
    - name: Cache Next.js
      uses: actions/cache@v4
      with:
        # Reference: https://nextjs.org/docs/pages/building-your-application/deploying/ci-build-caching#github-actions
        path: |
          ~/.npm
          web_ui/frontend/.next/cache
        # Generate a new cache whenever packages or source files change.
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx', '!**/node_modules/**') }}
        # If source files changed but packages didn't, rebuild from a prior cache.
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
    - name: Cache Go
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Test
      run: |
        make web-build
        go test      -timeout 15m -coverpkg=./director -covermode=count -coverprofile=${{ matrix.coverprofile }} -tags=${{ matrix.tags }} ./director -run TestStatMemory
        go test -p=4 -timeout 15m -coverpkg=./...      -covermode=count -coverprofile=${{ matrix.coverprofile }} -tags=${{ matrix.tags }} ./... -skip TestStatMemory
    - name: Get total code coverage
      if: github.event_name == 'pull_request'
      id: cc
      run: |
        set -x
        cc_total=`go tool cover -func=${{ matrix.coverprofile }} | grep total | grep -Eo '[0-9]+\.[0-9]+'`
        echo "cc_total=$cc_total" >> $GITHUB_OUTPUT
    - name: Add coverage information to action summary
      if: github.event_name == 'pull_request'
      run: echo 'Code coverage ' ${{steps.cc.outputs.cc_total}}'%' >> $GITHUB_STEP_SUMMARY
    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v6
      with:
        distribution: goreleaser
        version: latest
        args: build --single-target --clean --snapshot
    - name: Copy the pelican binary for the end-to-end tests
      run: |
        cp dist/${{ matrix.binary_name }}_linux_amd64_v1/${{ matrix.binary_name }} ./pelican
    - name: Run integration tests
      run: ./github_scripts/citests.sh
    - name: Run end-to-end test for object get/put
      run: ./github_scripts/get_put_test.sh
    - name: Run end-to-end test for director stat
      run: ./github_scripts/stat_test.sh
    - name: Run end-to-end test for --version flag
      run: ./github_scripts/version_test.sh
