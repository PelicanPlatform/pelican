name: Build and Push Container Images

on:
  pull_request:
  push:
    branches:
      - main
    tags:
      # only run release on v7.0.0 and up
      - v[7-9]\.[0-9]+\.[0-9]+
      - v[7-9]\.[0-9]+\.[0-9]+-rc\.[0-9]+
      - v[1-9][0-9]+\.[0-9]+\.[0-9]+
      - v[1-9][0-9]+\.[0-9]+\.[0-9]+-rc\.[0-9]+
  repository_dispatch:
    types:
      - dispatch-build
  workflow_dispatch:

permissions:
  contents: write

jobs:
  set-build-parameters:
    outputs:
      platforms: ${{ steps.parameters.outputs.PLATFORMS }}
      push-server: ${{ steps.parameters.outputs.PUSH_SERVER }}
      push-dev: ${{ steps.parameters.outputs.PUSH_DEV }}
      build-dev: ${{ steps.parameters.outputs.BUILD_DEV }}
    runs-on: ubuntu-latest
    steps:
      - name: Determine build parameters
        id: parameters
        run: |
          PUSH_SERVER=${{ github.repository == 'PelicanPlatform/pelican' && startsWith(github.ref, 'refs/tags/') }}
          PUSH_DEV=${{ github.repository == 'PelicanPlatform/pelican' && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          BUILD_DEV=${{ github.event_name == 'pull_request' || ( github.event_name == 'push' && github.ref == 'refs/heads/main' ) }}

          if ${PUSH_SERVER} || ${PUSH_DEV}; then
            PLATFORMS=linux/amd64,linux/arm64
          else
            PLATFORMS=linux/amd64
          fi

          echo "PLATFORMS=${PLATFORMS}" >> $GITHUB_OUTPUT
          echo "PUSH_SERVER=${PUSH_SERVER}" >> $GITHUB_OUTPUT
          echo "PUSH_DEV=${PUSH_DEV}" >> $GITHUB_OUTPUT
          echo "BUILD_DEV=${BUILD_DEV}" >> $GITHUB_OUTPUT

  cache-image-layers:
    needs: [set-build-parameters]
    runs-on: ubuntu-latest
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: amd64,arm64

      - name: Create a cache for Docker Buildx
        uses: actions/cache@v4
        with:
          path: /tmp/.base-buildx-cache
          key: base-buildx-${{ github.sha }}-${{ github.run_id }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Save the GitHub workspace
        uses: actions/cache/save@v4
        with:
          path: ${{ github.workspace }}
          key: github-workspace-${{ github.sha }}-${{ github.run_id }}

      - name: Create and cache image layers
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./images/Dockerfile
          platforms: ${{ needs.set-build-parameters.outputs.platforms }}
          target: origin
          cache-from: type=local,src=/tmp/.base-buildx-cache
          cache-to: type=local,dest=/tmp/.base-buildx-cache,mode=max

  make-tags:
    runs-on: ubuntu-latest
    outputs:
      TIMESTAMP: ${{ steps.make_timestamp.outputs.TIMESTAMP }}
      IS_LATEST: ${{ steps.is_latest.outputs.IS_LATEST }}
      GITHUB_TAG: ${{ steps.determine_tags.outputs.GITHUB_TAG }}
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Make timestamp tag
        id: make_timestamp
        run: echo "TIMESTAMP=$(date +%Y%m%d-%H%M)" >> $GITHUB_OUTPUT

      - name: Determine whether to tag this build with "latest"
        id: is_latest
        run: |
          git fetch --tags
          tags=$(git tag -l 'v*.*.*' | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V)
          highest_tag=$(echo "${tags}" | tail -n1)
          echo "Highest version tag is ${highest_tag}"
          if [[ "${GITHUB_REF##*/}" == "${highest_tag}" ]]; then
            echo "IS_LATEST=true" >> $GITHUB_OUTPUT
          else
            echo "IS_LATEST=false" >> $GITHUB_OUTPUT
          fi

      - name: Determine the tags that triggered this build
        id: determine_tags
        run: |
          # Check if we're working with a tagged version
          if [ -z "${{ inputs.tag }}" ]
          then
            # Use regex to check for a semver tag match
            if [[ ${GITHUB_REF##*/} =~ v[0-9]+\.[0-9]+\.[0-9]+ ]]
            then
              GITHUB_TAG=${GITHUB_REF##*/}
            else
              GITHUB_TAG="latest-dev"
            fi
          else
            GITHUB_TAG=${{ inputs.tag }}
          fi

          echo "Master SHA:"
          echo $(git rev-parse $GITHUB_REF_NAME)

          echo "Current SHA:"
          echo $(git rev-parse HEAD)

          echo "Computed tags:"
          echo $GITHUB_TAG
          echo "GITHUB_TAG=$GITHUB_TAG" >> $GITHUB_OUTPUT

  build-server-images:
    needs: [set-build-parameters, cache-image-layers, make-tags]
    strategy:
      fail-fast: False
      matrix:
        image:
          - cache
          - origin
          - director
          - registry
          - osdf-cache
          - osdf-origin
          - osdf-director
          - osdf-registry
    runs-on: ubuntu-latest

    steps:

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: amd64,arm64

      - name: Generate tag list
        id: generate-tag-list
        env:
          GITHUB_TAG: ${{ needs.make-tags.outputs.GITHUB_TAG }}
          IS_LATEST: ${{ needs.make-tags.outputs.IS_LATEST }}
        run: |
          docker_repo="pelican_platform"
          image_name=${{ matrix.image }}
          tag_list=()
          for registry in hub.opensciencegrid.org; do
            for image_tag in "$GITHUB_TAG"; do
              tag_list+=("$registry/$docker_repo/$image_name":"$image_tag")
            done
          done
          if [[ "$IS_LATEST" == "true" ]]; then
            tag_list+=("$registry/$docker_repo/$image_name:latest")
          fi
          # This causes the tag_list array to be comma-separated below,
          # which is required for build-push-action
          IFS=,
          echo "taglist=${tag_list[*]}" >> $GITHUB_OUTPUT

      - name: Restore the cache for Docker Buildx
        uses: actions/cache/restore@v4
        with:
          path: /tmp/.base-buildx-cache
          key: base-buildx-${{ github.sha }}-${{ github.run_id }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Log in to OSG Harbor
        uses: docker/login-action@v3
        if: ${{ needs.set-build-parameters.outputs.push-server == 'true' }}
        with:
          registry: hub.opensciencegrid.org
          username: ${{ secrets.PELICAN_HARBOR_ROBOT_USER }}
          password: ${{ secrets.PELICAN_HARBOR_ROBOT_PASSWORD }}

      - name: Restore the GitHub workspace
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}
          key: github-workspace-${{ github.sha }}-${{ github.run_id }}
          fail-on-cache-miss: true

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./images/Dockerfile
          platforms: ${{ needs.set-build-parameters.outputs.platforms }}
          target: ${{ matrix.image }}
          push: ${{ needs.set-build-parameters.outputs.push-server == 'true' }}
          tags: "${{ steps.generate-tag-list.outputs.taglist }}"
          cache-from: type=local,src=/tmp/.base-buildx-cache

  build-dev-image:
    needs: [set-build-parameters, cache-image-layers]
    if: ${{ needs.set-build-parameters.outputs.build-dev == 'true' }}
    runs-on: ubuntu-latest
    steps:

      - name: Determine image tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: hub.opensciencegrid.org/pelican_platform/pelican-dev
          tags: |
            type=raw,value=latest-itb
            type=raw,value=sha-{{sha}}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: amd64,arm64

      - name: Restore the cache for Docker Buildx
        uses: actions/cache/restore@v4
        with:
          path: /tmp/.base-buildx-cache
          key: base-buildx-${{ github.sha }}-${{ github.run_id }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Log in to OSG Harbor
        uses: docker/login-action@v3
        if: ${{ needs.set-build-parameters.outputs.push-dev == 'true' }}
        with:
          registry: hub.opensciencegrid.org
          username: ${{ secrets.PELICAN_HARBOR_ROBOT_USER }}
          password: ${{ secrets.PELICAN_HARBOR_ROBOT_PASSWORD }}

      - name: Restore the GitHub workspace
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}
          key: github-workspace-${{ github.sha }}-${{ github.run_id }}
          fail-on-cache-miss: true

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./images/Dockerfile
          platforms: ${{ needs.set-build-parameters.outputs.platforms }}
          target: dev-container
          push: ${{ needs.set-build-parameters.outputs.push-dev == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=local,src=/tmp/.base-buildx-cache
