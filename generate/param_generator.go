package main

// This should not be included in any release of pelican, instead only the generated "parameters.go" should packaged

import (
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"gopkg.in/yaml.v3"
)

func main() {
	GenParamEnum()
}

var requiredKeys = [4]string{"name", "description", "default", "type"}

func GenParamEnum() {
	/*
	* This generated a file "config/parameters.go" that is based off of docs/parameters.yaml to be used
	* instead of explicit calls to viper.Get*
	 */
	filename, _ := filepath.Abs("../docs/parameters.yaml")
	yamlFile, err := os.Open(filename)

	if err != nil {
		panic(err)
	}

	// This decoder and for loop is needed because the yaml file has multiple '---' delineated docs
	decoder := yaml.NewDecoder(yamlFile)

	var values []interface{}

	for {
		var value map[string]interface{}
		if err := decoder.Decode(&value); err != nil {
			if err == io.EOF {
				break
			}
			panic(fmt.Errorf("document decode failed: %w", err))
		}
		values = append(values, value)
	}

	stringParamMap := make(map[string]string)
	intParamMap := make(map[string]string)
	boolParamMap := make(map[string]string)

	// Skip the first parameter (ConfigBase is special)
	// Save the first parameter seperately in order to do "<pname> Param = iota" for the enums

	// Parse and check the values of each parameter against the required Keys
	for i := 1; i < len(values); i++ {
		entry := values[i].(map[string]interface{})
		for j := 0; j < len(requiredKeys); j++ {
			_, ok := entry[requiredKeys[j]]
			if !ok {
				errMsg := "all entries require the " + requiredKeys[j] + " field to populated"
				panic(errMsg)
			}
		}

		rawName := entry["name"].(string)
		name := strings.ReplaceAll(rawName, ".", "_")
		pType := entry["type"].(string)
		switch pType {
		case "url":
			fallthrough
		case "filename":
			fallthrough
		case "string":
			stringParamMap[name] = rawName
		case "int":
			intParamMap[name] = rawName
		case "bool":
			boolParamMap[name] = rawName
		default:
			errMsg := "UnknownType, add a new struct and return method to the generator or add it to one of the already handles types"
			panic(errMsg)
		}
	}

	// Create the file to be generated
	f, err := os.Create("../param/parameters.go")
	if err != nil {
		panic(err)
	}
	defer f.Close()

	// Generate the code based on the template
	err = packageTemplate.Execute(f, struct {
		StringMap map[string]string
		IntMap    map[string]string
		BoolMap   map[string]string
	}{StringMap: stringParamMap, IntMap: intParamMap, BoolMap: boolParamMap})

	if err != nil {
		panic(err)
	}
}

// As more varied paramters get added to parameters.yaml with different paths and names, this may need to be
// altered to be more general
var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.

package param

import (
	"github.com/spf13/viper"
)

type StringParam struct {
	name string
}

type BoolParam struct {
	name string
}

type IntParam struct {
	name string
}

func (sP StringParam) GetString() string {
	return viper.GetString(sP.name)
}

func (iP IntParam) GetInt() int {
	return viper.GetInt(iP.name)
}

func (bP BoolParam) GetBool() bool {
	return viper.GetBool(bP.name)
}

var ({{range $key, $value := .StringMap}}
	{{$key}} = StringParam{{"{"}}{{printf "%q" $value}}{{"}"}}
	{{- end}}
)

var ({{range $key, $value := .IntMap}}
	{{$key}} = IntParam{{"{"}}{{printf "%q" $value}}{{"}"}}
	{{- end}}
)

var ({{range $key, $value := .BoolMap}}
	{{$key}} = BoolParam{{"{"}}{{printf "%q" $value}}{{"}"}}
	{{- end}}
)
`))
