// Code generated by go generate at this location: /generate/error_code_generator.go; DO NOT EDIT.
/***************************************************************
 *
 * Copyright (C) 2024, Pelican Project, Morgridge Institute for Research
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you
 * may not use this file except in compliance with the License.  You may
 * obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ***************************************************************/

package error_codes

import (
	"fmt"
)

type PelicanError struct {
	errorType string
	exitCode  int
	code      int
	retryable bool
	err       error
}

func NewParameterError(err error) *PelicanError {
	return &PelicanError{
		errorType: "Parameter",
		exitCode:  4,
		code:      1000,
		retryable: false,
		err:       err,
	}
}

func NewResolutionError(err error) *PelicanError {
	return &PelicanError{
		errorType: "Resolution",
		exitCode:  5,
		code:      2000,
		retryable: false,
		err:       err,
	}
}

func NewContactError(err error) *PelicanError {
	return &PelicanError{
		errorType: "Contact",
		exitCode:  6,
		code:      3000,
		retryable: false,
		err:       err,
	}
}

func NewContact_DirectorError(err error) *PelicanError {
	return &PelicanError{
		errorType: "Contact.Director",
		exitCode:  6,
		code:      3001,
		retryable: false,
		err:       err,
	}
}

func NewContact_CacheError(err error) *PelicanError {
	return &PelicanError{
		errorType: "Contact.Cache",
		exitCode:  11,
		code:      3002,
		retryable: true,
		err:       err,
	}
}

func NewContact_OriginError(err error) *PelicanError {
	return &PelicanError{
		errorType: "Contact.Origin",
		exitCode:  6,
		code:      3003,
		retryable: false,
		err:       err,
	}
}

func NewContact_RegistryError(err error) *PelicanError {
	return &PelicanError{
		errorType: "Contact.Registry",
		exitCode:  6,
		code:      3004,
		retryable: false,
		err:       err,
	}
}

func NewAuthorizationError(err error) *PelicanError {
	return &PelicanError{
		errorType: "Authorization",
		exitCode:  7,
		code:      4000,
		retryable: false,
		err:       err,
	}
}

func NewSpecificationError(err error) *PelicanError {
	return &PelicanError{
		errorType: "Specification",
		exitCode:  8,
		code:      5000,
		retryable: false,
		err:       err,
	}
}

func NewSpecification_FileNotFoundError(err error) *PelicanError {
	return &PelicanError{
		errorType: "Specification.FileNotFound",
		exitCode:  8,
		code:      5011,
		retryable: false,
		err:       err,
	}
}

func NewSpecification_FileNotCreatedError(err error) *PelicanError {
	return &PelicanError{
		errorType: "Specification.FileNotCreated",
		exitCode:  8,
		code:      5002,
		retryable: false,
		err:       err,
	}
}

func NewTransferError(err error) *PelicanError {
	return &PelicanError{
		errorType: "Transfer",
		exitCode:  9,
		code:      6000,
		retryable: true,
		err:       err,
	}
}

func NewTransfer_StoppedTransferError(err error) *PelicanError {
	return &PelicanError{
		errorType: "Transfer.StoppedTransfer",
		exitCode:  11,
		code:      6001,
		retryable: true,
		err:       err,
	}
}

func NewTransfer_SlowTransferError(err error) *PelicanError {
	return &PelicanError{
		errorType: "Transfer.SlowTransfer",
		exitCode:  11,
		code:      6002,
		retryable: true,
		err:       err,
	}
}

// function that maps the error to the exit code
func (e *PelicanError) ExitCode() int {
	return e.exitCode
}

// function that takes in a PelicanError object and returns it in a string formatted message
func (e *PelicanError) Error() string {
	if e.err != nil {
		return fmt.Sprintf("%s Error: Error code %d: %v", e.errorType, e.code, e.err)
	}
	return e.errorType
}

// This function takes in a PelicanError unwraps any inner errors wrapped inside of it
func (e *PelicanError) Unwrap() error {
	return e.err
}

// This function takes in an existing error and wraps it into a PelicanError object
func (e *PelicanError) Wrap(err error) *PelicanError {
	e.err = err
	return e
}
